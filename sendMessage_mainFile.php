<?php
// use env variable to hide tokens and other secret information
// check this for more information 
// https://www.php.net/manual/en/reserved.variables.environment.php
const BOT_TOKEN = '6609905017:AAFe-vqb3NRmCSfZ5cSAVArglMgYNQb1jz8';

$data = file_get_contents('php://input');
$data = json_decode($data, true);
//$logFile = "userChatInfo.json";
//$log = fopen($logFile, "a");
//fwrite($log, $data);
//fclose($log);


if (array_key_exists('message', $data)) {                           // –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç message
    $userID = $data['message']['from']['id'];
    // user ternary operator for a small condition
    $userMessage = array_key_exists('text',$data['message']) ? $data['message']['text'] : '';
} 
elseif (array_key_exists('callback_query', $data)) {           // –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç callback_query
    $userID = $data['callback_query']['from']['id'];
    $userMessage = $data['callback_query']['message']['message_id'];
    $button = $data['callback_query']['data'];
} else {
    exit();
}


//$data = json_decode($data, true);
//$userID = $data['message']['from']['id'];

//$userMessage = $data['message']['text'];

$parameters = array(
    "chat_id" => $userID,
    "text" => $botMessage,
    "parse_mode" => "html"
);

$method = 'sendMessage';
$apiURL = 'https://api.telegram.org/bot'.BOT_TOKEN.'/'.$method;



//============================== –†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏/–∫–æ–º–∞–Ω–¥–∞–º–∏ ==============================

// split each command on different files, it's more comfortable to work
//============================== –∫–æ–º–∞–Ω–¥–∞ /start ==============================
    // it's a bad idea to use "if else" construction when you have a lot of condition cases, match better to use "switch case" construction
    // check this for more information
    // https://www.php.net/manual/en/control-structures.switch.php
    // or https://www.php.net/manual/ru/language.types.enumerations.php
if($userMessage == "/start"){
    // don't create a one big object, you cat create lots part of one object and join it self
    $parameters = array(
        "chat_id" => $userID,
        "text" => "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –ê–ö–ö–£–ú-–ú–ê–ì.\n–ë—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ?üöó\n\n‚ùó–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è‚ùå. –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µüëá",
        // i'm not sure but i think you cat use hash map to create an json-like object and after that call method json_encode
        "reply_markup" => json_encode(
            // maybe it's possible to use "[]" to create an array, without calling array constructor like "array()"
            array(
                "keyboard" => array(
                    array(
                        array(
                            "text" => "–ö–∞—Ç–∞–ª–æ–≥üìñ",
                            "callback_data" => "catalog", 
                        ),
                        array(
                            "text" => "–ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ –≥–æ—Ä–æ–¥–∞üìç",
                            "callback_data" => "map",
                        ),
                    ),
                    array(
                        array(
                            "text" => "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì",
                            "callback_data" => "questions", 
                        ),
                        array(
                            "text" => "–ü–æ–º–æ—â—åüÜò",
                            "callback_data" => "help", 
                        ),
                    ),
                ),
                "one_time_keyboard" => false,
                "resize_keyboard" => true,
            )
        ),
    );
}
// split each command on different files, it's more comfortable to work
//============================== –∫–æ–º–∞–Ω–¥–∞ /catalog || –∫–Ω–æ–ø–∫–∞ "–ö–∞—Ç–∞–ª–æ–≥" ==============================
elseif($userMessage == "/catalog" || $userMessage == "–ö–∞—Ç–∞–ª–æ–≥üìñ"){
    $parameters = array(
        "chat_id" => $userID,
        "text" => "–ö–∞—Ç–∞–ª–æ–≥ –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤üòâ",
    );
}
// split each command on different files, it's more comfortable to work
//============================== –∫–æ–º–∞–Ω–¥–∞ /map || –∫–Ω–æ–ø–∫–∞ "–ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ –≥–æ—Ä–æ–¥–∞" ==============================
elseif($userMessage == "/map" || $userMessage == "–ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ –≥–æ—Ä–æ–¥–∞üìç" || $button == "catalog"){
    $method = 'sendPhoto';
    
    $parameters = array(
        'chat_id' => $userID,
        'caption' => '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã',
        'photo' => curl_file_create(__DIR__ .'/pictures/map.png', 'image/png', 'map.png'),
        'protect_content' => true,
    );	

}
// split each command on different files, it's more comfortable to work
//============================== –∫–æ–º–∞–Ω–¥–∞ /questions || –∫–Ω–æ–ø–∫–∞ "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã" ==============================
elseif($userMessage == "/questions" || $userMessage == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì"){
    $parameters = array(
        "chat_id" => $userID,
        "text" => "–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞—à–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. –ù–∞–¥–µ—é—Å—å, –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Åüòäüëá",
        "reply_markup" => json_encode(
            array(
                "inline_keyboard" => array(
                    array(
                        array(
                            "text" => "–ß–µ–º EFB-–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã –ª—É—á—à–µ –æ–±—ã—á–Ω—ã—Ö‚ùì",
                            "callback_data" => "text_1", 
                        ),
                    ),
                    array(
                        array(
                            "text" => "–ü–æ—á–µ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–µ —á–µ—Ä–µ–∑ 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É‚ùì",
                            "callback_data" => "text_2", 
                        ),
                    ),
                    array(
                        array(
                            "text" => "–ß–µ—Ä–µ–∑ –∫–∞–∫–∏–µ –ø–æ—á—Ç–æ–≤—ã–µ —Å–ª—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ‚ùì",
                            "callback_data" => "text_3", 
                        ),
                    ),
                    array(
                        array(
                            "text" => "–ö–∞–∫–æ–π —É –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã‚ùì",
                            "callback_data" => "text_4", 
                        ),
                    ),
                    array(
                        array(
                            "text" => "–ê –º–æ–≥—É –ª–∏ —è –∑–∞–±—Ä–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –ø—Ä–∏–µ—Ö–∞—Ç—å –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ —Å–∞–º‚ùì",
                            "callback_data" => "text_5", 
                        ),
                    ),
                    array(
                        array(
                            "text" => "–ï—Å–ª–∏ —è –Ω–µ –Ω–∞—à–µ–ª –Ω—É–∂–Ω—ã–π –º–Ω–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä, —á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å‚ùì",
                            "callback_data" => "text_6", 
                        ),
                    ),
                ),
            )
        ),
    );
    
    // it's a bad idea to use "if else" construction when you have a lot of condition cases, match better to use "switch case" construction
    // check this for more information
    // https://www.php.net/manual/en/control-structures.switch.php
    // or https://www.php.net/manual/ru/language.types.enumerations.php

    // also it's a bad practice to validate predefined inputs like default string, in this case you cau use "enum" like:
    // enum some_button_values {
    //     case str_description = '–ü–æ—á–µ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–µ —á–µ—Ä–µ–∑ 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É‚ùì';
    //     case str_description = '–ß–µ—Ä–µ–∑ –∫–∞–∫–∏–µ –ø–æ—á—Ç–æ–≤—ã–µ —Å–ª—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ‚ùì';
    //     case str_description = '–ß–µ—Ä–µ–∑ –∫–∞–∫–∏–µ –ø–æ—á—Ç–æ–≤—ã–µ —Å–ª—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ‚ùì';
    // }

    // check this for more information
    // https://www.php.net/manual/ru/language.enumerations.backed.php
    if($button = "text_1"){
        $parameters = array(
            "chat_id" => $data['message']['from']['id'],
            "text" => "EFB-–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã –±—ã—Å—Ç—Ä–µ–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç–Ω—ã—Ö –±–∞—Ç–∞—Ä–µ–π –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –∑–∞—Ä—è–¥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏. –¢–∞–∫–∂–µ –æ–Ω–∏ —Å–ø–æ—Å–æ–±–Ω—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –≥–ª—É–±–æ–∫–∏—Ö —Ä–∞–∑—Ä—è–¥–æ–∫, —á–µ–º –æ–±—ã—á–Ω—ã–µ –∫–∏—Å–ª–æ—Ç–Ω—ã–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã. –ü–ª—é—Å –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Ü–∏–∫–ª–æ–≤ ¬´—Ä–∞–∑—Ä–∞–¥–∫–∏-–∑–∞—Ä—è–¥–∫–∏¬ª –±–µ–∑ —É—Ç—Ä–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏üòâ",
        );
    }
    elseif($userMessage == "–ü–æ—á–µ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–µ —á–µ—Ä–µ–∑ 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É‚ùì"){
        $parameters = array(
            "chat_id" => $data['message']['from']['id'],
            "text" => "—Ç–µ–∫—Å—Ç 2",
        );
    }
    elseif($userMessage == "–ß–µ—Ä–µ–∑ –∫–∞–∫–∏–µ –ø–æ—á—Ç–æ–≤—ã–µ —Å–ª—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ‚ùì"){
        $parameters = array(
            "chat_id" => $data['message']['from']['id'],
            "text" => "—Ç–µ–∫—Å—Ç 3",
        );
    }
    elseif($userMessage == "–ö–∞–∫–æ–π —É –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã‚ùì"){
        $parameters = array(
            "chat_id" => $data['message']['from']['id'],
            "text" => "—Ç–µ–∫—Å—Ç 4",
        );
    }
    elseif($userMessage == "–ê –º–æ–≥—É –ª–∏ —è –∑–∞–±—Ä–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –ø—Ä–∏–µ—Ö–∞—Ç—å –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ —Å–∞–º‚ùì"){
        $parameters = array(
            "chat_id" => $data['message']['from']['id'],
            "text" => "—Ç–µ–∫—Å—Ç 5",
        );
    }
    elseif($userMessage == "–ï—Å–ª–∏ —è –Ω–µ –Ω–∞—à–µ–ª –Ω—É–∂–Ω—ã–π –º–Ω–µ –∞–∫–∫—É–º, –Ω–æ —Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å —É –≤–∞—Å, —á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å‚ùì"){
        $parameters = array(
            "chat_id" => $data['message']['from']['id'],
            "text" => "—Ç–µ–∫—Å—Ç 6",
        );
    }


}


/*
elseif($userMessage == "–ß–µ–º EFB-–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã –ª—É—á—à–µ –æ–±—ã—á–Ω—ã—Ö‚ùì"){
    $parameters = array(
        "chat_id" => $data['message']['from']['id'],
        "text" => "EFB-–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã –±—ã—Å—Ç—Ä–µ–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç–Ω—ã—Ö –±–∞—Ç–∞—Ä–µ–π –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –∑–∞—Ä—è–¥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏. –¢–∞–∫–∂–µ –æ–Ω–∏ —Å–ø–æ—Å–æ–±–Ω—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –≥–ª—É–±–æ–∫–∏—Ö —Ä–∞–∑—Ä—è–¥–æ–∫, —á–µ–º –æ–±—ã—á–Ω—ã–µ –∫–∏—Å–ª–æ—Ç–Ω—ã–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã. –ü–ª—é—Å –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Ü–∏–∫–ª–æ–≤ ¬´—Ä–∞–∑—Ä–∞–¥–∫–∏-–∑–∞—Ä—è–¥–∫–∏¬ª –±–µ–∑ —É—Ç—Ä–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏üòâ",
    );
}
elseif($userMessage == "–ü–æ—á–µ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–µ —á–µ—Ä–µ–∑ 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É‚ùì"){
    $parameters = array(
        "chat_id" => $data['message']['from']['id'],
        "text" => "—Ç–µ–∫—Å—Ç 2",
    );
}
elseif($userMessage == "–ß–µ—Ä–µ–∑ –∫–∞–∫–∏–µ –ø–æ—á—Ç–æ–≤—ã–µ —Å–ª—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ‚ùì"){
    $parameters = array(
        "chat_id" => $data['message']['from']['id'],
        "text" => "—Ç–µ–∫—Å—Ç 3",
    );
}
elseif($userMessage == "–ö–∞–∫–æ–π —É –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã‚ùì"){
    $parameters = array(
        "chat_id" => $data['message']['from']['id'],
        "text" => "—Ç–µ–∫—Å—Ç 4",
    );
}
elseif($userMessage == "–ê –º–æ–≥—É –ª–∏ —è –∑–∞–±—Ä–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –ø—Ä–∏–µ—Ö–∞—Ç—å –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ —Å–∞–º‚ùì"){
    $parameters = array(
        "chat_id" => $data['message']['from']['id'],
        "text" => "—Ç–µ–∫—Å—Ç 5",
    );
}
elseif($userMessage == "–ï—Å–ª–∏ —è –Ω–µ –Ω–∞—à–µ–ª –Ω—É–∂–Ω—ã–π –º–Ω–µ –∞–∫–∫—É–º, –Ω–æ —Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å —É –≤–∞—Å, —á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å‚ùì"){
    $parameters = array(
        "chat_id" => $data['message']['from']['id'],
        "text" => "—Ç–µ–∫—Å—Ç 6",
    );
}
*/


//============================== –∫–æ–º–∞–Ω–¥–∞ /sos || –∫–Ω–æ–ø–∫–∞ "–ü–æ–º–æ—â—å" ==============================
elseif($userMessage == "/help" || $userMessage == "–ü–æ–º–æ—â—åüÜò"){
    $parameters = array(
        "chat_id" => $userID,
        "text" => "–í–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏‚ùì\n–ó–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –Ω–∞ –Ω–æ–º–µ—Ä +38(–•–•–•)-–•–•–•-–•–•-–•–•\n\n–ú–´ –í–ê–ú –ü–û–ú–û–ñ–ï–ú‚ùóÔ∏è",
    );
}
else exit();
  
$ch = curl_init($apiURL);
curl_setopt($ch, CURLOPT_URL, $apiURL);
curl_setopt($ch, CURLOPT_POST, count($parameters));
curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($parameters));
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
curl_setopt($ch, CURLOPT_HEADER, false);
$resultQuery = curl_exec($ch);
curl_close($ch);
  
echo $resultQuery;